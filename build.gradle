plugins {
  id "org.jetbrains.kotlin.jvm" version "1.3.72"
  id 'application'
  id 'com.github.johnrengelman.shadow' version '5.2.0'

}

group = 'io.kortex'
version = '1.0.0-SNAPSHOT'


repositories {
  mavenCentral()
  jcenter()
}

ext {
  kotlinVersion = '1.3.72'
  vertxVersion = '3.9.1'
  junitJupiterEngineVersion = '5.6.0'
}

application {
  mainClassName = 'com.tessin.billte.AppKt'
}

def mainVerticleName = 'io.kortex.core.MainVerticle'
def watchForChange = 'src/**/*'
def doOnChange = './gradlew classes'
def launcherClassName = 'io.kortex.core.AppKt'

application {
  mainClassName = launcherClassName
}

dependencies {

  implementation "io.vertx:vertx-config:$vertxVersion"
  implementation "io.vertx:vertx-auth-jwt:$vertxVersion"
  implementation "io.vertx:vertx-unit:$vertxVersion"
  implementation "io.vertx:vertx-web:$vertxVersion"
  implementation "io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion"
  implementation "io.vertx:vertx-mongo-client:$vertxVersion"
  implementation "io.vertx:vertx-lang-kotlin:$vertxVersion"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

  // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'


  testImplementation "io.vertx:vertx-junit5:$vertxVersion"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion"

}

compileKotlin {
  kotlinOptions.jvmTarget = '1.8'
}


compileTestKotlin {
  kotlinOptions.jvmTarget = '1.8'
}

shadowJar {
  manifest {
    attributes 'Main-Class': mainClassName
  }
  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}
jar {

//  zip64 = true
  manifest {
    attributes 'Main-Class': mainClassName
  }
//  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

  // so that meta inf from packages would not interfere
//  exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}


test {
  useJUnitPlatform()
  testLogging {
    events 'PASSED', 'FAILED', 'SKIPPED'
  }
}

run {
  args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange"]
}
